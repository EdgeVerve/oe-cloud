/**
 * 
 * Â©2016-2017 EdgeVerve Systems Limited (a fully owned Infosys subsidiary),
 * Bangalore, India. All Rights Reserved.
 * 
 */

var chalk = require('chalk');
var chai = require('chai');
var expect = chai.expect;
var bootstrap = require('./bootstrap');
var loopback = require('loopback');
var app = bootstrap.app;
var models = bootstrap.models;
var parentModelName = "SupplierModel";
var childModelName = "AccountsModel";

describe(chalk.blue('Decision table hasOne relation check'), function () {
  this.timeout(20000);
  var parentModel;
  var childModel;
  before('Create DecisionTables and models for hasOne relation check', function (done) {

    models.ModelDefinition.create({
      'name': childModelName,
      'base': 'BaseEntity',
      'properties': {
        'num': 'number'
      }
    }, bootstrap.defaultContext, function (err, model) {
      if (err) {
        done(err);
      } else {
        models.ModelDefinition.create({
          'name': parentModelName,
          'base': 'BaseEntity',
          'properties': {
            'name': {
              'type': 'string',
            },
            'accountNumber': {
              'type': 'number',
            }
          },
          'relations': {
            'account': {
              'type': 'hasOne',
              'model': childModelName,
              'foreignKey': 'supplierId'
            }
          }
        }, bootstrap.defaultContext, function (err, model) {
          if (err) {
            done(err);
          } else {
            parentModel = loopback.getModel(parentModelName, bootstrap.defaultContext);
            childModel = loopback.getModel(childModelName, bootstrap.defaultContext);
            models.DecisionTable.create({
              "name": "RelationPopulator",
              "document": {
                "documentName": "RelationPopulator.xlsx",
                "documentData": "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,"
              }
            }, bootstrap.defaultContext, function (err, data) {
              if (err) {
                return done(err);
              }
              expect(data.name).to.be.equal("RelationPopulator");
              var modelRuleData = {
                "modelName": parentModelName,
                "disabled": false,
                "defaultRules": ["RelationPopulator"]
              }
              models.ModelRule.create(modelRuleData, bootstrap.defaultContext, function (err, result) {
                if (err) {
                  return done(err);
                }
                expect(result.modelName).to.be.equal(parentModel.modelName);
                done();
              });
            });
          }
        });
      }
    });
  });

  it('Decision table HasOne relation check', function (done) {
    var childPayload = { "num": 111, "id": "acc1", "supplierId": "sup1" };
    var parentPayload = { "name": "supName", "id": "sup1" };
    childModel.create(childPayload, bootstrap.defaultContext, function (err, childInst) {
      if (err) {
        return done(err);
      }
      parentModel.create(parentPayload, bootstrap.defaultContext, function (err, result) {
        if (err) {
          return done(err);
        }
        expect(result.accountNumber).to.be.equal(childPayload.num);
        done();
      });
    });
  });
});