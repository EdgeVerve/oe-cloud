/**
 * 
 * Â©2016-2017 EdgeVerve Systems Limited (a fully owned Infosys subsidiary),
 * Bangalore, India. All Rights Reserved.
 * 
 */

var chalk = require('chalk');
var chai = require('chai');
var expect = chai.expect;
var bootstrap = require('./bootstrap');
var loopback = require('loopback');
var app = bootstrap.app;
var models = bootstrap.models;
var parentModelName = "CountryModel";
var childModelName = "CityModel";

xdescribe(chalk.blue('Decision table belongsTo relation check'), function () {
  var parentModel;
  var childModel;

  before('Create DecisionTables and models for belongsTo relation check', function (done) {
    // debugger;
    models.ModelDefinition.create({
      'name': parentModelName,
      'base': 'BaseEntity',
      'properties': {
        'name': 'string'
      }
    }, bootstrap.defaultContext, function (err, model) {
      if (err) {
        done(err);
      } else {
        models.ModelDefinition.create({
          'name': childModelName,
          'base': 'BaseEntity',
          'properties': {
            'name': {
              'type': 'string',
            },
            'countryName': {
              'type': 'string',
            }
          },
          'relations': {
            'country': {
              'type': 'belongsTo',
              'model': parentModelName,
              'foreignKey': 'countryId'
            }
          }
        }, bootstrap.defaultContext, function (err, model) {
          if (err) {
            done(err);
          } else {
            parentModel = loopback.getModel(parentModelName, bootstrap.defaultContext);
            childModel = loopback.getModel(childModelName, bootstrap.defaultContext);
            models.DecisionTable.create({
              "name": "RelationValidator",
              "document": {
                "documentName": "RelationValidator.xlsx",
                "documentData": "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,"
              }
            }, bootstrap.defaultContext, function (err, data) {
              if (err) {
                done(err);
              }
              else {
                expect(data.name).to.be.equal("RelationValidator");
                var modelRuleData = {
                  "modelName": childModelName,
                  "disabled": false,
                  "validationRules": ["RelationValidator"]
                }
                models.ModelRule.create(modelRuleData, bootstrap.defaultContext, function (err, result) {
                  if (err) {
                    return done(err);
                  }
                  expect(result.modelName).to.be.equal(childModel.modelName);
                  done();
                });
              }
              
            });
          }
        });
      }
    });
  });

  it('Successfully creates childModel data as belongsTo validation passes', function (done) {
    var childPayload = { "name": "Sydney", "id": "sy1", "countryId": "aus1", "countryName": "Australia" };
    var parentPayload = { "name": "Australia", "id": "aus1" };
    // debugger;
    parentModel.create(parentPayload, bootstrap.defaultContext, function (err, parentInst) {
      if (err) {
        done(err);
      }
      else {
        debugger;
        childModel.create(childPayload, bootstrap.defaultContext, function (err, childInst) {
          if (err) {
            done(err);
          }
          expect(childInst.name).to.be.equal(childPayload.name);
          expect(childInst.id).to.be.equal(childPayload.id);
          expect(childInst.countryId).to.be.equal(childPayload.countryId);
          expect(childInst.countryName).to.be.equal(childPayload.countryName);
          expect(childInst.countryName).to.be.equal(parentPayload.name);
          done();
        });        
      }
      
    });
  });

  it('Fails to create childModel data as belongsTo validation is not met', function (done) {
    var childPayload = { "name": "Wellington", "id": "wl1", "countryId": "nz1", "countryName": "Nova Zeelandia" };
    var parentPayload = { "name": "New Zealand", "id": "nz1" };
    debugger;
    parentModel.create(parentPayload, bootstrap.defaultContext, function (err, parentInst) {
      if (err) {
        done(err);
      }
      else {
        childModel.create(childPayload, bootstrap.defaultContext, function (err, childInst) {
          expect(err).not.to.be.undefined;
          done();
        });
      }      
    });
  });
});