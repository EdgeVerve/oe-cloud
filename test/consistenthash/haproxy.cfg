global
        daemon
	stats timeout 30
#	debug 
#	stats socket /var/run/haproxy.stat

defaults
	mode http
        timeout connect 5000
        timeout client  50000
        timeout server  50000

frontend http-in
  bind *:8080
	mode http
	acl path_having_id path_reg -i ^\/api\/(?:[^\/\?]+?)\/(?:[^\/\?]+?)
	acl model_id_preexists hdr('x-evproxy-model-id') -m found

	http-request set-header x-evproxy-path %[path]
	http-request set-header x-evproxy-url %[url]

  http-request set-var(req.use_chash) bool(false) 
  http-request set-var(req.use_chash) bool(true) if path_having_id
  http-request set-var(req.use_chash) bool(true) if model_id_preexists
  
  http-request set-header x-evproxy-p1 %[var(req.use_chash)]
  
  http-request set-header x-evproxy-model-plural %[path,field(3,'/'),lower] if path_having_id !model_id_preexists 
	http-request set-header x-evproxy-model-id %[path,field(4,'/')]	if path_having_id !model_id_preexists 
  
	use_backend chashservers if { var(req.use_chash) -m bool }
	default_backend rrservers
	
backend chashservers
  http-request set-header x-evproxy-hash-key %[req.hdr('x-evproxy-model-plural')]/%[req.hdr('x-evproxy-model-id')]
	http-send-name-header 'x-evproxy-server-name'
	balance hdr(x-evproxy-hash-key)
	hash-type consistent
	server server2 127.0.0.1:3000 id 5 check
	server server1 127.0.0.1:3100 id 6 check

backend rrservers
	http-send-name-header 'x-evproxy-server-name'
	server server3 127.0.0.1:3000 id 5 check
	server server4 127.0.0.1:3100 id 6 check