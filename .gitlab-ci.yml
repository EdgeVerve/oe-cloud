stages:
  - build
  - test

cache:
  untracked: true
  paths: 
    - node_modules/

before_script:
  - export USER_BROADCASTER=false
  - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
  - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
  - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
  - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$group"-"$project; else export APP_IMAGE_NAME=$group"-"$branch"-"$project; fi
  - APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
  - npm config set registry $NPM_REGISTRY
  - npm config set fetch-retries 0
  - export DOMAIN_NAME=oecloud.local
  - export REGISTRY=registry.${DOMAIN_NAME}
  - export NETWORK_NAME=${APP_IMAGE_NAME}

buildjob:
  stage: build
  script:
    - echo "Performing code style check..."
    - status_eslint=0
    - exit_status=0
    - time npm install eslint babel-eslint --no-optional
    - if npm run lint; then status_eslint=0; else status_eslint=1; fi
    - if [ $status_eslint == 1 ]; then exit_status=1 && echo "esLint errors exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
    - echo "Code style check done successfully"
    - echo "Building oe-cloud image..."
    - time npm install --no-optional
    - time docker build -t ${REGISTRY}/${APP_IMAGE_NAME}:latest --no-cache --pull . & BUILD_PID=$!
    - mkdir -p /data/db
    - mongod --dbpath /data/db &
    - haproxy -f ./test/consistenthash/haproxy.cfg -p /run/haproxy.pid -Ds &
    - export APP_URL=http://localhost:8080/api
    - NO_PROXY=$NO_PROXY,localhost,127.0.0.1
    - mocha test/consistenthash/server.js &
    - sleep 60
    - mocha test/consistenthash/server.js 3100 &
    - sleep 60
    - mocha test/consistenthash/client.js 3200
    - wait ${BUILD_PID}
    - docker push ${REGISTRY}/${APP_IMAGE_NAME}:latest
    - echo "Image (${REGISTRY}/${APP_IMAGE_NAME}:latest) built and pushed to registry"
  artifacts:
    untracked: true
    expire_in: 2h
    paths:
      - node_modules/
  tags:
    - CEP_RUNNER

mongotest:
  stage: test
  script:
    - export NODE_ENV=docker
    - export DB=mongo
    - export STARTUP_CMD="npm run grunt-cover"
    - export FILE_NAME=docker-compose.test.env.yml
    - export STACK_NAME=test-${DB}-${APP_IMAGE_NAME}
    - export NETWORK_NAME=${STACK_NAME}
    - export exit_status=0
    - export nameWebService=${STACK_NAME}"_web"
    - export nameDBService=${STACK_NAME}"_"${DB}
    - docker stack rm ${STACK_NAME}
    - sleep 10
    - docker stack deploy --compose-file ${FILE_NAME} ${STACK_NAME}
    - docker service logs -f ${nameWebService} | sed 's/^[^|]*|//g' &
    - export isShutdown=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | wc -l)
    - while [ $isShutdown -eq 0 ]; do echo "Test cases still running... "; export isShutdown=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | wc -l); sleep 20; done
    - export LOGS_PID=$(ps ef | grep "[d]ocker service logs -f" | awk '{print $1}')
    - if [ ${LOGS_PID} -ne 0 ]; then kill $LOGS_PID; fi
    - export DB_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameDBService} | wc -l)
    - export WEB_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameWebService} | wc -l)
    - export WEB_REJECTED_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameWebService} | grep Rejected | wc -l)
    - export WEB_EXIT_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameWebService} | grep Failed | wc -l)
    - docker stack ps --no-trunc ${STACK_NAME}
    - if [ ${DB_CHECK} -ne 0 ]; then echo "Failed due to mongo service going down..."; export exit_status=1; fi
    - if [ $WEB_CHECK -ne 0 ] && ([ $WEB_EXIT_CHECK -ne 0 -o $WEB_REJECTED_CHECK -ne 0 ]); then echo "Failed due to web service fail..."; export exit_status=1; fi
    
    # - if echo $CI_BUILD_REPO | grep "oecloud.io/oe-cloud.git"; then export MAIN_BRANCH=1; else export MAIN_BRANCH=0; fi
    # - if [ $MAIN_BRANCH -eq 0 ]; then echo "Not the main project, hence not sending coverage report to 10.73.53.167..."; docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME down; exit $exit_status; fi
    # - docker --tls -H $SWARM_HOST cp $WEB_CONTAINER_NAME:/home/src/coverage/ .
    # - echo "Sending coverage reports to 10.73.53.167..."
    # - tar -cf oe-cloud.tar -C ./coverage/lcov-report/ .
    # - ssh root@10.73.53.167 'rm -rf /data/documentation-portal/coverage/oe-cloud'
    # - scp oe-cloud.tar root@10.73.53.167:/data/documentation-portal/coverage/
    # - ssh root@10.73.53.167 'mkdir -p /data/documentation-portal/coverage/oe-cloud'
    # - ssh root@10.73.53.167 'tar -xf /data/documentation-portal/coverage/oe-cloud.tar -C /data/documentation-portal/coverage/oe-cloud'
    # - ssh root@10.73.53.167 'rm -rf /data/documentation-portal/coverage/oe-cloud.tar'
    # - echo "Coverage report updated"

    - docker stack rm ${STACK_NAME}
    - exit $exit_status
  tags:
    - CEP_RUNNER

postgrestest:
  stage: test
  script:
    - export NODE_ENV=postgres
    - export DB=postgres
    - export STARTUP_CMD="npm run grunt-cover"
    - export FILE_NAME=docker-compose.test.env.yml
    - export STACK_NAME=test-${DB}-${APP_IMAGE_NAME}
    - export NETWORK_NAME=${STACK_NAME}
    - export exit_status=0
    - export nameWebService=${STACK_NAME}"_web"
    - export nameDBService=${STACK_NAME}"_"${DB}
    - docker stack rm ${STACK_NAME}
    - sleep 10
    - docker stack deploy --compose-file ${FILE_NAME} ${STACK_NAME}
    - docker service logs -f ${nameWebService} | sed 's/^[^|]*|//g' &
    - export isShutdown=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | wc -l)
    - while [ $isShutdown -eq 0 ]; do echo "Test cases still running... "; export isShutdown=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | wc -l); sleep 20; done
    - export LOGS_PID=$(ps ef | grep "[d]ocker service logs -f" | awk '{print $1}')
    - if [ ${LOGS_PID} -ne 0 ]; then kill $LOGS_PID; fi
    - export DB_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameDBService} | wc -l)
    - export WEB_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameWebService} | wc -l)
    - export WEB_REJECTED_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameWebService} | grep Rejected | wc -l)
    - export WEB_EXIT_CHECK=$(docker stack ps ${STACK_NAME} | grep "Shutdown" | grep ${nameWebService} | grep Failed | wc -l)
    - docker stack ps --no-trunc ${STACK_NAME}
    - if [ ${DB_CHECK} -ne 0 ]; then echo "Failed due to mongo service going down..."; export exit_status=1; fi
    - if [ $WEB_CHECK -ne 0 ] && ([ $WEB_EXIT_CHECK -ne 0 -o $WEB_REJECTED_CHECK -ne 0 ]); then echo "Failed due to web service fail..."; export exit_status=1; fi
    - docker stack rm ${STACK_NAME}
    - exit $exit_status
  tags:
    - CEP_RUNNER


swarm:
  stage: test
  script: 
    - export ROUTER="cep_router"
    - export HAPROXY=10.73.96.214
    - export nameWebService=${APP_IMAGE_NAME}"_web"
    - docker stack rm ${APP_IMAGE_NAME}
    - cd test/actor-tests/test-files
    - time docker build --build-arg REGISTRY=${REGISTRY} --build-arg APP_IMAGE_NAME=${APP_IMAGE_NAME}  -t ${REGISTRY}/${APP_IMAGE_NAME}:testing .
    - time docker push ${REGISTRY}/${APP_IMAGE_NAME}:testing
    - sed 's/\$NETWORK_NAME/'"$NETWORK_NAME"'/g' qqq.yml > qqq2.yml
    - mv -f qqq2.yml qqq.yml
    - sed 's/\$ROUTER/'"$ROUTER"'/g' qqq.yml > qqq2.yml
    - mv -f qqq2.yml qqq.yml
    - sed 's/\$EVFURL/'${APP_IMAGE_NAME}.${DOMAIN_NAME}'/g' ../actorIntegrationTest.js > ../actorIntegrationTest2.js
    - mv -f ../actorIntegrationTest2.js ../actorIntegrationTest.js
    - docker stack deploy -c qqq.yml ${APP_IMAGE_NAME}
    - echo "${HAPROXY} ${APP_IMAGE_NAME}.${DOMAIN_NAME}" >> /etc/hosts
    - docker service logs -f ${nameWebService} | sed 's/^[^|]*|//g' &
    - isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/)
    - export countElapsed=0
    - export app_exit_status=0
    - while [ $isStarted -ne 200 ]; do let countElapsed=countElapsed+1; echo ""; echo -n "Waiting till the URL is up..."; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/); echo $isStarted; sleep 15; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=200; fi; done
    - if [ ${app_exit_status} -ne 0 ]; then echo "Failed to start app..."; docker stack rm ${APP_IMAGE_NAME}; exit ${app_exit_status}; fi
    - time mocha ../actorIntegrationTest.js
    - docker stack rm ${APP_IMAGE_NAME}
  tags:
    - CEP_RUNNER
