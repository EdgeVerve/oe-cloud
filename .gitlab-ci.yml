stages:
  - build
  - test

before_script:
  - export nameGroupProject=${CI_PROJECT_DIR##*builds/}
  - export project=${nameGroupProject##*/}
  - export group=${nameGroupProject%/*}
  - export branch=${CI_BUILD_REF_NAME}
  - export USER_BROADCASTER=false
  - export project=${project//[^[:alnum:]]/}
  - export group=${group//[^[:alnum:]]/}
  - export branch=${branch//[^[:alnum:]]/}
  - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$group"-"$project; else export APP_IMAGE_NAME=$group"-"$branch"-"$project; fi
  - APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
  - npm config set registry $NPM_REGISTRY
  - npm config set fetch-retries 0
  - npm config set loglevel warn
  - evf-paas login -u admin -p Anything_f9 evfapp.dev -d && source $HOME/evf-paas/evfapp.dev/install_env.sh
  - echo "Enviroment where app will be deployed in swarm - "$SWARM_HOST
  - echo "Domain name - "$DOMAIN_NAME
  - echo "App will be pushed to registry - "$REGISTRY
  - echo "The image name in registry - "$APP_IMAGE_NAME

buildjob:
  stage: build
  script:
    - echo "Performing code style check..."
    - status_eslint=0
    - exit_status=0
    - if npm run lint; then status_eslint=0; else status_eslint=1; fi
    - if [ $status_eslint == 1 ]; then exit_status=1 && echo "esLint errors exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
    - echo "Code style check done successfully"
    - echo "Building oe-cloud image..."
    - time npm install --no-optional
    - time evf-paas build & buildpid=$!
    # - mkdir -p /data/db
    # - mongod --dbpath /data/db &
    # - haproxy -f ./test/consistenthash/haproxy.cfg -p /run/haproxy.pid -Ds &
    # - export APP_URL=http://localhost:8080/api
    # - NO_PROXY=$NO_PROXY,localhost,127.0.0.1
    # - mocha test/consistenthash/server.js &
    # - sleep 60
    # - mocha test/consistenthash/server.js 3100 &
    # - sleep 60
    # - mocha test/consistenthash/client.js 3200
    - wait ${buildpid}
    - echo "Image ($REGISTRY/$APP_IMAGE_NAME:latest) built and pushed to registry"
  tags:
    - EVF-PAAS

mongotest:
  stage: test
  script:
    - export COMPOSE_HTTP_TIMEOUT=180
    - export NODE_ENV=docker
    - export DB=mongo
    - export PROJECT_NAME=test-$DB-$APP_IMAGE_NAME
    - export NETWORK_NAME=${PROJECT_NAME//[^[:alnum:]]/}
    - export WEB_CONTAINER_NAME=$NETWORK_NAME"_web_1"
    - export FILE_NAME=docker-compose.test.env.yml
    - export exit_status=0
    - docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME down
    - if docker --tls -H $SWARM_HOST network ls | grep $NETWORK_NAME; then docker --tls -H $SWARM_HOST network rm $(docker --tls -H $SWARM_HOST network ls | grep $NETWORK_NAME | awk -F" " '{ print $1 }'); else echo "Network doesn't exist"; fi
    - docker --tls -H $SWARM_HOST pull $REGISTRY/$APP_IMAGE_NAME
    - docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME up -d
    - if docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME exec web grunt test-with-coverage; then echo "Test cases passed successfully"; else echo "Test cases are failing" && export exit_status=1; fi
    - if echo $CI_BUILD_REPO | grep "oecloud.io/oe-cloud.git"; then export MAIN_BRANCH=1; else export MAIN_BRANCH=0; fi
    - if [ $MAIN_BRANCH -eq 0 ]; then echo "Not the main project, hence not sending coverage report to 10.73.53.167..."; docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME down; exit $exit_status; fi
    - docker --tls -H $SWARM_HOST cp $WEB_CONTAINER_NAME:/home/src/coverage/ .
    - echo "Sending coverage reports to 10.73.53.167..."
    - tar -cf oe-cloud.tar -C ./coverage/lcov-report/ .
    - ssh root@10.73.53.167 'rm -rf /data/documentation-portal/coverage/oe-cloud'
    - scp oe-cloud.tar root@10.73.53.167:/data/documentation-portal/coverage/
    - ssh root@10.73.53.167 'mkdir -p /data/documentation-portal/coverage/oe-cloud'
    - ssh root@10.73.53.167 'tar -xf /data/documentation-portal/coverage/oe-cloud.tar -C /data/documentation-portal/coverage/oe-cloud'
    - ssh root@10.73.53.167 'rm -rf /data/documentation-portal/coverage/oe-cloud.tar'
    - echo "Coverage report updated"
    - docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME down
    - exit $exit_status
  tags:
    - EVF-PAAS

postgrestest:
  stage: test
  script:
    - export COMPOSE_HTTP_TIMEOUT=180
    - export NODE_ENV=postgres
    - export DB=postgres
    - export PROJECT_NAME=test-$DB-$APP_IMAGE_NAME
    - export NETWORK_NAME=${PROJECT_NAME//[^[:alnum:]]/}
    - export FILE_NAME=docker-compose.test.env.yml
    - export exit_status=0
    - docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME down
    - if docker --tls -H $SWARM_HOST network ls | grep $NETWORK_NAME; then docker --tls -H $SWARM_HOST network rm $(docker --tls -H $SWARM_HOST network ls | grep $NETWORK_NAME | awk -F" " '{ print $1 }'); else echo "Network doesn't exist"; fi
    - docker --tls -H $SWARM_HOST pull $REGISTRY/$APP_IMAGE_NAME
    - docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME up -d
    - if docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME exec web grunt mochaTest:postgres; then echo "Test cases passed successfully"; else echo "Test cases are failing" && export exit_status=1; fi
    - docker-compose -H $SWARM_HOST -f $FILE_NAME -p $PROJECT_NAME down
    - exit $exit_status
  tags:
    - EVF-PAAS


swarm:
  stage: test
  script: 
    - "export DOMAIN_NAME=evfapp.dev"
    - "export HAPROXY=10.73.53.144"
    - "REGISTRY=registry.${DOMAIN_NAME}"
    - "name=${CI_PROJECT_DIR##*builds/}"
    - "appName=${name##*/}"
    - "appUserName=${name%/*}"
    - "branchName=${CI_BUILD_REF_NAME}"
    - "email=$(git log --reverse -n 1 $CI_BUILD_REF --pretty=format:\"%ae\")"
    - "appName=${appName//[^[:alnum:]]/}"
    - "appUserName=${appUserName//[^[:alnum:]]/}"
    - "branchName=${branchName//[^[:alnum:]]/}"
    - "if [ $branchName == \"master\" ]; then export APP_IMAGE_NAME=$appUserName\"-\"$appName; else export APP_IMAGE_NAME=$appUserName\"-\"$branchName\"-\"$appName; fi"
    - "APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')"
    - "NETWORK_NAME=${APP_IMAGE_NAME}"
    - docker stack rm $APP_IMAGE_NAME
    - "npm set registry $NPM_REGISTRY"
    - "echo \"Npm Registry - \"${NPM_REGISTRY}"
    - "echo \"App will be pushed to registry - \"${REGISTRY}"
    - "echo \"The image name in registry - \"$APP_IMAGE_NAME"
    - "npm install --no-optional"
    - "node test/actor-tests/prepareIntegrationTest.js"
    - "time docker build --build-arg HTTP_PROXY=$http_proxy --build-arg HTTPS_PROXY=$https_proxy -t $REGISTRY/$APP_IMAGE_NAME:latest ."
    - "time docker push $REGISTRY/$APP_IMAGE_NAME:latest"
    - sed 's/\$NETWORK_NAME/'"$NETWORK_NAME"'/g' qqq.yml > qqq2.yml
    - "mv -f qqq2.yml qqq.yml"
    - sed 's/\$EVFURL/'${APP_IMAGE_NAME}.${DOMAIN_NAME}'/g' test/actor-tests/actorIntegrationTest.js > test/actor-tests/actorIntegrationTest2.js
    - "mv -f test/actor-tests/actorIntegrationTest2.js test/actor-tests/actorIntegrationTest.js"
    - docker stack deploy -c qqq.yml $APP_IMAGE_NAME
    - echo "10.73.96.215    ${APP_IMAGE_NAME}.${DOMAIN_NAME}" >> /etc/hosts
    - isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/)
    - export countElapsed=0
    - export app_exit_status=0
    - while [ $isStarted -ne 200 ]; do let countElapsed=countElapsed+1; echo ""; echo -n "Waiting till the URL is up..."; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/); echo $isStarted; sleep 15; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=200; fi; done
    - echo "Your application URL is accessible @ https://${APP_IMAGE_NAME}.${DOMAIN_NAME}"
    - "mocha test/actor-tests/actorIntegrationTest.js"
    - "node test/actor-tests/cleanupIntegrationTest.js"
  tags:
    - EVF-PAAS13
